rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Admin configuration
    match /admin/config {
      allow read: if request.auth != null;
      allow write: if false; // Only Firebase Console can modify
    }
    
    match /adminActions/{actionId} {
      allow create: if request.auth != null && isAdmin();
      allow read: if request.auth != null && isAdmin();
      // No update/delete - audit logs should be immutable
    }

    // Public items
    match /items/{itemId} {
      allow read: if true;
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
    }

    // Posts
    match /posts/{postId} {
      allow read: if request.auth != null &&
        request.auth.uid == resource.data.userId;
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if request.auth != null &&
        request.auth.uid == resource.data.userId;
    }

    // User profiles
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        request.auth.uid == userId ||
        isAdmin()
      );
    }

    // userChats
    match /userChats/{userId} {
      allow read, list: if request.auth != null && request.auth.uid == userId;

      allow write: if request.auth != null && (
        request.auth.uid == userId ||
        (request.resource != null &&
         request.resource.data.otherUserId == request.auth.uid)
      );

      match /chats/{chatId} {
        allow read, list: if request.auth != null && request.auth.uid == userId;

        allow write: if request.auth != null && (
          request.auth.uid == userId ||
          (request.resource != null &&
           request.resource.data.otherUserId == request.auth.uid)
        );
      }
    }

    // Chats and messages
    match /chats/{chatId} {
      allow read, write: if request.auth != null && (
        // Allow participants to read/write their chats
        (resource != null && request.auth.uid in resource.data.participants) ||
        (request.resource != null && request.auth.uid in request.resource.data.participants) ||
        // Allow item owners to manage chats about their items
        (resource != null &&
         resource.data.itemId != null &&
         exists(/databases/$(database)/documents/items/$(resource.data.itemId)) &&
         get(/databases/$(database)/documents/items/$(resource.data.itemId)).data.userId == request.auth.uid) ||
        // Allow users to check if a chat exists when they would be a participant
        // Chat ID format: {userId1}_{userId2}_{itemId} where userIds are sorted
        (chatIdContainsUser(chatId, request.auth.uid)) ||
        // Allow item owners to check chats about their items (when item exists)
        (chatIdHasItem(chatId) && 
         exists(/databases/$(database)/documents/items/$(getItemIdFromChatId(chatId))) &&
         get(/databases/$(database)/documents/items/$(getItemIdFromChatId(chatId))).data.userId == request.auth.uid)
      );

      match /messages/{messageId} {
        allow read: if request.auth != null;

        allow create: if request.auth != null &&
          request.resource.data.senderId == request.auth.uid &&
          request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants;

        allow update, delete: if false;
      }
    }

    // Bug reports
    match /bugReports/{bugReportId} {
      allow create: if request.auth != null &&
        request.resource.data.userId == request.auth.uid;
      
      allow read: if request.auth != null && (
        resource.data.userId == request.auth.uid ||
        isAdmin()
      );
      
      allow update, delete: if request.auth != null && isAdmin();
    }

    // Flags collection
    match /flags/{flagId} {
      allow create: if request.auth != null &&
        request.resource.data.reporterId == request.auth.uid;
      
      // Allow reading own flags and admin reading all flags
      allow read: if request.auth != null && (
        (resource.data.reporterId != null && resource.data.reporterId == request.auth.uid) ||
        isAdmin()
      );
      
      // Allow listing/querying flags for own reports (this is key for queries to work)
      allow list: if request.auth != null && (
        // Allow users to query their own flags
        (request.query.limit <= 50 && 
         resource.data.reporterId == request.auth.uid) ||
        // Allow admins to query all flags
        isAdmin()
      );
      
      allow update, delete: if request.auth != null && isAdmin();
    }

    // Admin validation function
    function isAdmin() {
      return request.auth != null && 
             request.auth.token.email != null &&
             exists(/databases/$(database)/documents/admin/config) &&
             request.auth.token.email in get(/databases/$(database)/documents/admin/config).data.adminEmails;
    }

    // Helper functions
    function chatIdContainsUser(chatId, userId) {
      // Chat ID format: {userId1}_{userId2}_{itemId}
      // Split by '_' and check if userId is in the first two parts
      let parts = chatId.split('_');
      return parts.size() >= 3 && (parts[0] == userId || parts[1] == userId);
    }

    function chatIdHasItem(chatId) {
      // Check if chat ID has at least 3 parts (indicating it has an itemId)
      return chatId.split('_').size() >= 3;
    }

    function getItemIdFromChatId(chatId) {
      // Extract item ID from chat ID (everything after the second underscore)
      let parts = chatId.split('_');
      return parts.size() >= 3 ? parts[2:].join('_') : '';
    }
  }
} 